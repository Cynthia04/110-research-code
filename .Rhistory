if(z5>0 & z5.1[1]>0 & z5.1[2]>0 & z5.1[3]>0){break}
}
alpha5[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),z5,s10),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z5 <- rnorm(1,mean(s0),sd(s0))
z5.1 <- z5+ sk*s10
if(z5>0 & z5.1[1]>0 & z5.1[2]>0 & z5.1[3]>0){break}
}
np1 <- dnorm(z5,mean(s0),sd(s0),log = T)
np0 <- dnorm(s00,mean(s0),sd(s0),log = T)
alpha5[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),z5,s10),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
s0[i] <- z5
accept5[i] <- 1
}else{
s0[i] <- s00
accept5[i] <- 0
}
s00 <- s0[i]
#beta1
if(i<=before){
repeat{
z6 <- rnorm(1,s10,sigma_proposal[6]*stepsize0[6])
z6.1 <- s00+ sk*z6
if(z6<0 & z6.1[1]>0 & z6.1[2]>0 & z6.1[3]>0){break}
}
alpha6[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,z6),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z6 <- rnorm(1,mean(s1),sd(s1))
z6.1 <- s00+ sk*z6
if(z6<0 & z6.1[1]>0 & z6.1[2]>0 & z6.1[3]>0){break}
}
np1 <- dnorm(z6,mean(s1),sd(s1),log = T)
np0 <- dnorm(s10,mean(s1),sd(s1),log = T)
alpha6[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,z6),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
s1[i] <- z6
accept6[i] <- 1
}else{
s1[i] <- s10
accept6[i] <- 0
}
s10 <- s1[i]
if( i == 2000 | i == 4000 | i == 6000 | i == 8000){
acpt = c(mean(accept1),mean(accept2),mean(accept3),
mean(accept4),mean(accept5),mean(accept6))
stepchange = c()
stepsize = c()
for( k in 1:6){
stepchange[k] = log(acpt[k]/(1-acpt[k])) - log(0.4/0.6)
stepsize[k] = exp(log(stepsize0[k]) + stepchange[k])
stepsize0[k] = stepsize[k]
}
}
}
end <- Sys.time()
end-start
a0 <- a0*10^(-2); a1 <- a1*10^(-3); b0 <- b0*10^(-4); b1 <- b1*10^(-5)
library(coda)
mcmc <- function(x){return(c(mean(x),sd(x),quantile(x, probs = c(0.025, 0.975)),
HPDinterval(as.mcmc(x),prob = 0.95)))}
mcmc_table <- t(apply(rbind(a0[seq(m+k,m+N*k,k)],a1[seq(m+k,m+N*k,k)],b0[seq(m+k,m+N*k,k)],
b1[seq(m+k,m+N*k,k)],s0[seq(m+k,m+N*k,k)],s1[seq(m+k,m+N*k,k)]),1,mcmc))
mcmc_table <- cbind("initial"=initial,
"proposal density:N(,sd=)"=sigma_proposal,
"Acceptance rate (%)"=c(mean(accept1),mean(accept2),mean(accept3),
mean(accept4),mean(accept5),mean(accept6))*100,
mean=mcmc_table[,1],mle=t3.wei[1:6,1],
sd=mcmc_table[,2],"sd of mle"=t3.wei[8:13,1],mcmc_table[,-c(1:2)])
colnames(mcmc_table)[10:11] <- c("lower of HPD","upper of HPD")
mcmc_table
par(mfrow=c(3,2))
plot(a0,type = "l",xlab = "iteration times (40000)",ylab="a0",
main=expression(paste("Trace of MCMC sample of ",a[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(a1,type = "l",xlab = "iteration times (40000)",ylab="a1",
main=expression(paste("Trace of MCMC sample of ",a[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b0,type = "l",xlab = "iteration times (40000)",ylab="b0",
main=expression(paste("Trace of MCMC sample of ",b[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b1,type = "l",xlab = "iteration times (40000)",ylab="b1",
main=expression(paste("Trace of MCMC sample of ",b[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s0,type = "l",xlab = "iteration times (40000)",ylab="beta0",
main=expression(paste("Trace of MCMC sample of ",beta[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s1,type = "l",xlab = "iteration times (40000)",ylab="beta1",
main=expression(paste("Trace of MCMC sample of ",beta[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(mfrow=c(1,1))
# ----------------------- Histogram of posterior sample ------------------------
par(mfrow=c(3,2))
hist(a0[seq(m+k,m+N*k,k)],breaks = 5,
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(a[0]),
main=expression(paste("Histogram of posterior sample of ",a[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(a0[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[1,1], lwd = 2, lty=2, col = "blue")
hist(a1[seq(m+k,m+N*k,k)],breaks=10,
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(a[1]),
main=expression(paste("Histogram of posterior sample of ",a[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(a1[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[2,1], lwd = 2, lty=2, col = "blue")
hist(b0[seq(m+k,m+N*k,k)],
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(b[0]),
main=expression(paste("Histogram of posterior sample of ",b[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(b0[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[3,1], lwd = 2, lty=2, col = "blue")
hist(b1[seq(m+k,m+N*k,k)],
col="white", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(b[1]),
main=expression(paste("Histogram of posterior sample of ",b[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(b1[seq(m+k,m+N*k,k)], adjust = 2),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[4,1], lwd = 2, lty=2, col = "blue")
hist(s0[seq(m+k,m+N*k,k)],
col="white", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(beta[0]),
main=expression(paste("Histogram of posterior sample of ",beta[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(s0[seq(m+k,m+N*k,k)], adjust = 4),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[5,1], lwd = 2, lty=2, col = "blue")
hist(s1[seq(m+k,m+N*k,k)],
col="white", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(beta[1]),
main=expression(paste("Histogram of posterior sample of ",beta[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(s1[seq(m+k,m+N*k,k)], adjust = 2),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[6,1], lwd = 2, lty=2, col = "blue")
par(mfrow=c(1,1))
par(mfrow=c(3,2))
plot(a0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="a0",
main=expression(paste("Trace of MCMC sample of ",a[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(a1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="a1",
main=expression(paste("Trace of MCMC sample of ",a[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="b0",
main=expression(paste("Trace of MCMC sample of ",b[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="b1",
main=expression(paste("Trace of MCMC sample of ",b[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="beta0",
main=expression(paste("Trace of MCMC sample of ",beta[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="beta1",
main=expression(paste("Trace of MCMC sample of ",beta[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(mfrow=c(1,1))
#---------------------------------------
#_______________________________________________________________________
# --------------------- Parameter settings -----------------------------
# burn-in: 20000, posterior sample: 2000, thin: 10
# randomly choose initial value:
# a0、a1、b0、b1 的整數部位 ~ U(0,1000)
# beta0(s0) ~ U(0,1000), beta1(s1) ~ U(-1000,0)
# Use normal proposal with sigma settings (1,1,1,1,20,30) for theta.
# The first 10000 iteration use MCMC method.
#________________________________________________________________________
m=2*10^4;N=2000;k=10
# initial value
repeat{
a00 <- runif(1,0,1000); a10 <- runif(1,0,1000)
b00 <- runif(1,0,1000); b10 <- runif(1,0,1000)
repeat{
s00 <- runif(1,0,1000); s10 <- runif(1,-1000,0)
if(s00+s10*sk[1]>0 & s00+s10*sk[2]>0 & s00+s10*sk[3]>0){break}
}
if(alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)!= -Inf &
is.na(alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti))==F)
{break}
}
initial <- c(a00,a10,b00,b10,s00,s10)
# sigma proposal
sigma_proposal=c(10,10,10,10,20,30)
a0 <- c();a1 <- c();b0 <- c();b1 <- c();s0 <- c();s1 <- c()
# acceptance rate
alpha1 <- c(); alpha2 <- c(); alpha3 <- c(); alpha4 <- c(); alpha5 <- c(); alpha6 <- c()
accept1 <- c();accept2 <- c();accept3 <- c();accept4 <- c();accept5 <- c();accept6 <- c()
# compare with uniform(0,1) value
u <- runif(m+N*k)
# take log to uniform(0,1) value
u <- log(u)
# the first iterations for using mcmc
before <- 10000
stepsize0 <- c(1,1,1,1,1,1)
start <- Sys.time()
for(i in 1:(m+N*k)){
#a0
if(i<=before){
repeat{
z1 <- rnorm(1,a00,sigma_proposal[1]*stepsize0[1])
if(z1>0){break}
}
alpha1[i] <- alpha <- min(alphalikelihood1.1(c(z1*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z1 <- rnorm(1,mean(a0),sd(a0))
if(z1>0){break}
}
np1 <- dnorm(z1,mean(a0),sd(a0),log = T)
np0 <- dnorm(a00,mean(a0),sd(a0),log = T)
alpha1[i] <- alpha <- min(alphalikelihood1.1(c(z1*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
a0[i] <- z1
accept1[i] <- 1
}else{
a0[i] <- a00
accept1[i] <- 0
}
a00 <- a0[i]
#a1
if(i<=before){
repeat{
z2 <- rnorm(1,mean(a10),sigma_proposal[2]*stepsize0[2])
if(z2>0){break}
}
alpha2[i] <- alpha <- min(alphalikelihood1.1(c(a00*10^(-2),z2*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z2 <- rnorm(1,mean(a1),sd(a1))
if(z2>0){break}
}
np1 <- dnorm(z2,mean(a1),sd(a1),log = T)
np0 <- dnorm(a10,mean(a1),sd(a1),log = T)
alpha2[i] <- alpha <- min(alphalikelihood1.1(c(a00*10^(-2),z2*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood1.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
a1[i] <- z2
accept2[i] <- 1
}else{
a1[i] <- a10
accept2[i] <- 0
}
a10 <- a1[i]
#b0
if(i<=before){
repeat{
z3 <- rnorm(1,b00,sigma_proposal[3]*stepsize0[3])
if(z3>0){break}
}
alpha3[i] <- alpha <- min(alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),z3*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z3 <- rnorm(1,mean(b0),sd(b0))
if(z3>0){break}
}
np1 <- dnorm(z3,mean(b0),sd(b0),log = T)
np0 <- dnorm(b00,mean(b0),sd(b0),log = T)
alpha3[i] <- alpha <- min(alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),z3*10^(-4),b10*10^(-5),s00,s10),Ti)-
alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
b0[i] <- z3
accept3[i] <- 1
}else{
b0[i] <- b00
accept3[i] <- 0
}
b00 <- b0[i]
#b1
if(i<=before){
repeat{
z4 <- rnorm(1,b10,sigma_proposal[4]*stepsize0[4])
if(z4>0 ){break}
}
alpha4[i] <- alpha <- min(alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),z4*10^(-5),s00,s10),Ti)-
alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z4 <- rnorm(1,mean(b1),sd(b1))
if(z4>0 ){break}
}
np1 <- dnorm(z4,mean(b1),sd(b1),log = T)
np0 <- dnorm(b10,mean(b1),sd(b1),log = T)
alpha4[i] <- alpha <- min(alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),z4*10^(-5),s00,s10),Ti)-
alphalikelihood2.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
b1[i] <- z4
accept4[i] <- 1
}else{
b1[i] <- b10
accept4[i] <- 0
}
b10 <- b1[i]
#beta0
if(i<=before){
repeat{
z5 <- rnorm(1,s00,sigma_proposal[5]*stepsize0[5])
z5.1 <- z5+ sk*s10
if(z5>0 & z5.1[1]>0 & z5.1[2]>0 & z5.1[3]>0){break}
}
alpha5[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),z5,s10),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z5 <- rnorm(1,mean(s0),sd(s0))
z5.1 <- z5+ sk*s10
if(z5>0 & z5.1[1]>0 & z5.1[2]>0 & z5.1[3]>0){break}
}
np1 <- dnorm(z5,mean(s0),sd(s0),log = T)
np0 <- dnorm(s00,mean(s0),sd(s0),log = T)
alpha5[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),z5,s10),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
s0[i] <- z5
accept5[i] <- 1
}else{
s0[i] <- s00
accept5[i] <- 0
}
s00 <- s0[i]
#beta1
if(i<=before){
repeat{
z6 <- rnorm(1,s10,sigma_proposal[6]*stepsize0[6])
z6.1 <- s00+ sk*z6
if(z6<0 & z6.1[1]>0 & z6.1[2]>0 & z6.1[3]>0){break}
}
alpha6[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,z6),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti),0)
}else{
repeat{
z6 <- rnorm(1,mean(s1),sd(s1))
z6.1 <- s00+ sk*z6
if(z6<0 & z6.1[1]>0 & z6.1[2]>0 & z6.1[3]>0){break}
}
np1 <- dnorm(z6,mean(s1),sd(s1),log = T)
np0 <- dnorm(s10,mean(s1),sd(s1),log = T)
alpha6[i] <- alpha <- min(alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,z6),Ti)-
alphalikelihood3.1(c(a00*10^(-2),a10*10^(-3),b00*10^(-4),b10*10^(-5),s00,s10),Ti)+
np1-np0,0)
}
if(alpha>u[i]){
s1[i] <- z6
accept6[i] <- 1
}else{
s1[i] <- s10
accept6[i] <- 0
}
s10 <- s1[i]
if( i == 2000 | i == 4000 | i == 6000 | i == 8000){
acpt = c(mean(accept1),mean(accept2),mean(accept3),
mean(accept4),mean(accept5),mean(accept6))
stepchange = c()
stepsize = c()
for( k in 1:6){
stepchange[k] = log(acpt[k]/(1-acpt[k])) - log(0.4/0.6)
stepsize[k] = exp(log(stepsize0[k]) + stepchange[k])
stepsize0[k] = stepsize[k]
}
}
}
end <- Sys.time()
end-start
# ---------------------------- Trace of mcmc sample ----------------------------
traceplot <- function(data,ylab0,main0){
plot(data,type = "l",xlab = "iteration times (40000)",
ylab=ylab0,main=main0,
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
}
par(mfrow=c(3,2))
traceplot(a0,expression(a[0]),expression("Trace of MCMC sample of "~ a[0]))
traceplot(a1,expression(a[1]),expression("Trace of MCMC sample of "~ a[1]))
traceplot(b0,expression(b[0]),expression("Trace of MCMC sample of "~ b[0]))
traceplot(b1,expression(b[1]),expression("Trace of MCMC sample of "~ b[1]))
traceplot(s0,expression(beta[0]),expression("Trace of MCMC sample of "~ beta[0]))
traceplot(s1,expression(beta[1]),expression("Trace of MCMC sample of "~ beta[1]))
par(mfrow=c(1,1))
par(mfrow=c(3,2))
plot(a0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="a0",
main=expression(paste("Trace of MCMC sample of ",a[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(a1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="a1",
main=expression(paste("Trace of MCMC sample of ",a[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="b0",
main=expression(paste("Trace of MCMC sample of ",b[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(b1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="b1",
main=expression(paste("Trace of MCMC sample of ",b[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s0[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="beta0",
main=expression(paste("Trace of MCMC sample of ",beta[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
plot(s1[seq(m+k,m+N*k,k)],type = "l",xlab = "iteration times (40000)",ylab="beta1",
main=expression(paste("Trace of MCMC sample of ",beta[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(mfrow=c(1,1))
# ----------------------- Histogram of posterior sample ------------------------
par(mfrow=c(3,2))
hist(a0[seq(m+k,m+N*k,k)],breaks = 5,
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(a[0]),
main=expression(paste("Histogram of posterior sample of ",a[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(a0[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[1,1], lwd = 2, lty=2, col = "blue")
hist(a1[seq(m+k,m+N*k,k)],breaks=10,
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(a[1]),
main=expression(paste("Histogram of posterior sample of ",a[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(a1[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[2,1], lwd = 2, lty=2, col = "blue")
hist(b0[seq(m+k,m+N*k,k)],
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(b[0]),
main=expression(paste("Histogram of posterior sample of ",b[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(b0[seq(m+k,m+N*k,k)], adjust = 3),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[3,1], lwd = 2, lty=2, col = "blue")
hist(b1[seq(m+k,m+N*k,k)],
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(b[1]),
main=expression(paste("Histogram of posterior sample of ",b[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(b1[seq(m+k,m+N*k,k)], adjust = 2),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[4,1], lwd = 2, lty=2, col = "blue")
hist(s0[seq(m+k,m+N*k,k)],
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(beta[0]),
main=expression(paste("Histogram of posterior sample of ",beta[0])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(s0[seq(m+k,m+N*k,k)], adjust = 4),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[5,1], lwd = 2, lty=2, col = "blue")
hist(s1[seq(m+k,m+N*k,k)],
col="gray90", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = expression(beta[1]),
main=expression(paste("Histogram of posterior sample of ",beta[1])),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(density(s1[seq(m+k,m+N*k,k)], adjust = 2),
lwd = 2, # thickness of line
col = "red")
abline(v= t3.wei[6,1], lwd = 2, lty=2, col = "blue")
par(mfrow=c(1,1))
