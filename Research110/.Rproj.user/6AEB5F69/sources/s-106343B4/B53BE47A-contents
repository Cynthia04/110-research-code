library(snow)
library(pbapply)
library(parallel)
t3 <- matrix(c(3,
               2,
               5,
               4,
               20,
               -5),ncol=2,byrow = T)
sk <- c(0.111,0.556,1)
est <- apply(t3,1,function(x) x[1]+sk*x[2])
colnames(est) <- c("a","b","s")
rownames(est) <- c("1C","3C","5C")
n1 <- 3 ;n2 <- 3 ;n3 <- 3
nk <- n1+n2+n3
est0 <- rbind(matrix(rep(est[1,],n1),ncol=3,byrow = T),
              matrix(rep(est[2,],n2),ncol=3,byrow = T),
              matrix(rep(est[3,],n3),ncol=3,byrow = T))
colnames(est0) <- c("a","b","s")

#########################################

ll.wei = function(a,b,c,data){  
  sumt =sum(data);J=length(data)
  k <- c()
  for (s in 2:J){
    t<-  (c-1)*(lgamma(1/c+1)+log((a/b)*(exp(b*data[s])-exp(b*data[s-1]))))
    k <- append(k,t)
  }
  k1 <- c()
  for (s in 2:J){
    t1<- (a/b*gamma(1/c+1)*(exp(b*data[s])-exp(b*data[s-1])))^c
    k1 <- append(k1,t1)
  }
  ans= 45*lgamma(1/c+1)+45*log(c)+45*log(a)+sum(k)-sum(k1)+b*sumt
  -ans
}

ll1.wei <- function(theta,data){
  ll.wei(theta[1]*10^(-1),theta[2]*10^(-1),theta[3]*10^(-1),data)
}
Opt<-function(x){
  iter=x[4]
  initial=c(x[1],x[2],x[3])
  error=1
  before=0
  while(abs(error)-1e-15>0){
    step1=try(optim(initial,ll1.wei,control=list(factr=1e-15,maxit=10^9),hessian=T,data=Ti[,8]),silent = T)
    if(step1$convergence==0){
      initial <- step1$par
      error <- step1$value-before
      before <- step1$value
    }
  }
  parameter <- c(step1$par[1]*10^(-1),step1$par[2]*10^(-1),step1$par[3]*10^(-1))
  I=solve(step1$hessian)
  sd <- c(sqrt(I[1,1]*10^(-2)),sqrt(I[2,2]*10^(-2)),sqrt(I[3,3]*10^(-2)))
  return(c(parameter,-step1$value,sd)) #logL
}
################################################################################################################################
par9sample_8 <- matrix(0,ncol=1,nrow = 7)
for( seed in 1:1000){
  
  set.seed(seed)
  x <- apply(matrix(est0[,3],ncol=1),1,
             function(x){rweibull(45,shape=x,scale=(1/gamma(1/x+1)))})
  x1 <- apply(x,2,function(s){cumsum(s)})
  x2 <- matrix(0,ncol=3)
  for(i in 1:nk){
    t <- cbind (rep(est0[i,1],45),rep(est0[i,2],45),x1[,i])
    x2 <- rbind(x2,t)
  }
  x2 <- x2[-1,]
  Ti<- apply(x2,1,function(x){log(x[2]*x[3]/x[1]+1)/x[2]})
  Ti <- matrix(Ti,ncol=nk)
  Ti <- rbind(rep(0,nk),Ti)
  rm(i,t)
  N=50
  rn <- matrix(0,ncol=4,nrow=N)
  set.seed(seed);rn[,1]<-runif(N,0,100);rn[,2]<-runif(N,0,100);rn[,3]<-runif(N,10,100)
  rn[,4]<-1:N
  cl = makeCluster(6,type='SOCK') 
  clusterExport(cl, c("n1","n2","n3","nk","sk","rn","Opt","ll.wei","ll1.wei","Ti")) 
  result=pbapply(as.matrix(rn),1,function(x){Opt(x)},cl = cl)
  stopCluster(cl)
  result <- t(result)
  ind1 <- which.max(result[,4])
  t2_9sample <- matrix(result[ind1,],ncol=1)
  par9sample_8 <- cbind(par9sample_8,t2_9sample)
}
write.csv(par9sample_8,"par9sample_8.csv")


par <- par9sample_8
par<- par[,-1]
TP <- c(5,9,15)
par <- as.matrix(par)
table <- rbind(apply(par[1:3,],1,function(x){return(c(mean(x),sd(x),quantile(x,c(.025,.975))))}),
               apply(matrix(1:3,ncol=1),1,function(x){mean((par[x,]-TP[x])^2)}))
colnames(table) <- c("a0","b0","beta0")
rownames(table) <- c("mean","sd","2.5%","97.5%","MSE")
table <- round(t(table),5)

write.csv(t(table),"table8.csv")
